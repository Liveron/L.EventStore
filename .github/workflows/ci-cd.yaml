name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.x'
  DOTNET_ENVIRONMENT: 'Test'
  POSTGRES_PORT: 5432
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up environment variables
      run: |
        echo "POSTGRESQL_DB=Host=localhost;Port=${{ env.POSTGRES_PORT }};Database=event_store_test_db;Username=postgres;Passwork=${{ env.POSTGRES_PASSWORD }}" >> $GITHUB_ENV

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        source-url: https://nuget.pkg.github.com/Liveron/index.json
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.NUGET_PACKAGES_ACCESS_TOKEN }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Install Docker using Docker's official script
      run: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh ./get-docker.sh --dry-run
      continue-on-error: false

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.37.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Docker Compose Up
      run: |
        docker-compose -f compose.test.yaml up -d
        sleep 10  # Wait for the database to be ready
        docker ps
      
#     - name: Test
#       run: dotnet test --no-build 

#   pack-and-publish:
#     needs: build-and-test
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4

#     - name: Setup .NET
#       uses: actions/setup-dotnet@v4
#       with:
#         dotnet-version: ${{ env.DOTNET_VERSION }}
#         source-url: https://nuget.pkg.github.com/Liveron/index.json
#       env:
#         NUGET_AUTH_TOKEN: ${{ secrets.NUGET_PACKAGES_ACCESS_TOKEN }}

#     - name: Pack
#       run: dotnet pack --configuration Release -o ./artifacts

#     - name: Publish to GitHub Packages
#       working-directory: artifacts
#       run: | 
#         dotnet nuget push * --source "https://nuget.pkg.github.com/Liveron/index.json" \
#         --api-key ${{ secrets.NUGET_PACKAGES_ACCESS_TOKEN }} \
#         --skip-duplicate